"""
Django settings for gee_backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3a$us3-jo$at9fgg#xqw0=gdcfw)366nb6j%9%h1!a_hfqz_&)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# ALLOWED_HOSTS specifies which domains can access the Django application.
# The '*' wildcard allows access from all domains 
# useful for development but unsafe for production.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',  
    # INSTALLED_APPS defines the list of applications enabled in this Django project.
# - 'rest_framework' is included to support Django REST Framework for building APIs.
# - 'corsheaders' allows cross-origin requests, which is needed when integrating
#   a frontend (React) with this Django backend.
# - 'myapp' is a custom Django application that contains the project-specific logic. 
   'rest_framework',  # Enables API functionality.
    'corsheaders',  # Handles Cross-Origin Resource Sharing (CORS).
    'myapp',  # Custom Django app where the business logic is implemented.
]

MIDDLEWARE = [ 
              
# MIDDLEWARE is a list of middleware classes that process requests before 
# reaching views and responses before being sent to the client.
'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
        'whitenoise.middleware.WhiteNoiseMiddleware',  

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# CORS_ALLOWED_ORIGINS lists specific domains that are allowed to access the API.
# - "http://localhost:3000": Allows the React frontend running locally.
# - "https://earthengine.googleapis.com": Allows communication with Google Earth Engine API.
# - "http://127.0.0.1:8000": Allows requests from the local Django development server.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://earthengine.googleapis.com",  # Allow tile sources
    "http://127.0.0.1:8000",
]
# CORS_ALLOW_ALL_ORIGINS = True means that all domains are allowed to send requests.
# This is typically used in development but should be restricted in production
# for security reasons.
CORS_ALLOW_ALL_ORIGINS = True
# GEE credentials setup via environment variable

# Importing the Earth Engine (ee) library to interact with Google Earth Engine.
import ee
# Attempting to initialize Google Earth Engine (GEE).
# If initialization fails, an exception is caught, and an error message is printed.
try:
    ee.Initialize()
except Exception as e:
    print("GEE initialization failed:", e)
ROOT_URLCONF = 'gee_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gee_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# STATIC_ROOT specifies the directory where static files will be collected
# when running `collectstatic`. This is required when serving static files
# in a production environment.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
